import React, { useEffect, useState } from 'react';
import { getActivities } from '../services/api';
import '../css/Activities.css';

export default function Activities() {
  const [activities, setActivities] = useState([]);
  const [loading, setLoading] = useState(true);
  const [err, setErr] = useState(null);

  // state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö search ‡πÅ‡∏•‡∏∞ filter
  const [search, setSearch] = useState("");
  const [country, setCountry] = useState("");
  const [province, setProvince] = useState("");
  const [selectedTags, setSelectedTags] = useState([]); // ‡πÄ‡∏Å‡πá‡∏ö tags ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö array

  // ‡πÄ‡∏Å‡πá‡∏ö country / province / tags ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å activities
  const [countries, setCountries] = useState([]);
  const [provinces, setProvinces] = useState([]);
  const [availableTags, setAvailableTags] = useState([]); // ‡πÄ‡∏Å‡πá‡∏ö tags ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ
  const [sortOrder, setSortOrder] = useState("");
  

  useEffect(() => {
    let mounted = true;
    (async () => {
      try {
        setLoading(true);
        const data = await getActivities({ page: 1, limit: 50 });
        if (!mounted) return;

        setActivities(data);

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á list ‡∏Ç‡∏≠‡∏á country, province ‡∏à‡∏≤‡∏Å data
        const uniqueCountries = [...new Set(data.map(a => a.country).filter(Boolean))];
        const uniqueProvinces = [...new Set(data.map(a => a.province).filter(Boolean))];

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á list ‡∏Ç‡∏≠‡∏á tags ‡∏à‡∏≤‡∏Å data (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ tags ‡πÄ‡∏õ‡πá‡∏ô array ‡πÉ‡∏ô activity object)
        const allTags = data.flatMap(a => a.tags || []); // ‡∏£‡∏ß‡∏° tags ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å activity
        const uniqueTags = [...new Set(allTags.filter(Boolean))]; // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô null/undefined ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥

        setCountries(uniqueCountries);
        setProvinces(uniqueProvinces);
        setAvailableTags(uniqueTags);

      } catch (e) {
        console.error(e);
        setErr(e.message);
      } finally {
        setLoading(false);
      }
    })();
    return () => { mounted = false; };
  }, []);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å/‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å tag
  const handleTagToggle = (tag) => {
    setSelectedTags(prev => {
      if (prev.includes(tag)) {
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ tag ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏≤‡∏≠‡∏≠‡∏Å
        return prev.filter(t => t !== tag);
      } else {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
        return [...prev, tag];
      }
    });
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡πâ‡∏≤‡∏á tags ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const clearAllTags = () => {
    setSelectedTags([]);
  };

  if (loading) {
    return (
      <div className="activities-container">
        <div className="activities-inner-container">
          <div className="activities-loading">
            <div className="activities-spinner"></div>
            <div>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°...</div>
          </div>
        </div>
      </div>
    );
  }

  if (err) {
    return (
      <div className="activities-container">
        <div className="activities-inner-container">
          <div className="activities-error">
            <h3>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</h3>
            <p>Error: {err}</p>
          </div>
        </div>
      </div>
    );
  }

  // filter data ‡∏ï‡∏≤‡∏° search + country + province + tags
  let filteredActivities = activities.filter(act => {
    const matchesSearch =
      act.title.toLowerCase().includes(search.toLowerCase()) ||
      act.description.toLowerCase().includes(search.toLowerCase());

    const matchesCountry = country ? act.country === country : true;
    const matchesProvince = province ? act.province === province : true;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö tags - ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å tags ‡πÑ‡∏ß‡πâ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ tag ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    const matchesTags = selectedTags.length === 0 || 
      (act.tags && act.tags.some(tag => selectedTags.includes(tag)));

    return matchesSearch && matchesCountry && matchesProvince && matchesTags;
  });

  // sort ‡∏ï‡∏≤‡∏° sortOrder
  if (sortOrder === "asc") {
    filteredActivities.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));
  } else if (sortOrder === "desc") {
    filteredActivities.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
  }
  

  return (
    <div className="activities-container">
      <div className="activities-inner-container">
        <h2 className="activities-title">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</h2>
        
        <input
          type="text"
          placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°..."
          value={search}
          onChange={e => setSearch(e.target.value)}
          className="activities-search-input"
        />

        {/* Search + Filters */}
        <div className="activities-filters">
          <select value={country} onChange={e => setCountry(e.target.value)}>
            <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® --</option>
            {countries.map((c, i) => (
              <option key={i} value={c}>{c}</option>
            ))}
          </select>

          <select value={province} onChange={e => setProvince(e.target.value)}>
            <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î --</option>
            {provinces.map((p, i) => (
              <option key={i} value={p}>{p}</option>
            ))}
          </select>

          <select value={sortOrder} onChange={e => setSortOrder(e.target.value)}>
            <option value="">-- ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á --</option>
            <option value="asc">‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î ‚Üí ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏∏‡∏î</option>
            <option value="desc">‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏™‡∏∏‡∏î ‚Üí ‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î</option>
          </select>
        </div>

        {/* Tag Selection */}
        {availableTags.length > 0 && (
          <div className="activities-tag-section">
            <div className="activities-tag-header">
              <h4>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Tags</h4>
              {selectedTags.length > 0 && (
                <button 
                  onClick={clearAllTags}
                  className="activities-clear-tags-btn"
                >
                  ‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ({selectedTags.length})
                </button>
              )}
            </div>
            
            <div className="activities-tag-container">
              {availableTags.map((tag, i) => (
                <button
                  key={i}
                  onClick={() => handleTagToggle(tag)}
                  className={`activities-tag-btn ${
                    selectedTags.includes(tag) ? 'activities-tag-selected' : ''
                  }`}
                >
                  {tag}
                  {selectedTags.includes(tag) && <span className="activities-tag-check">‚úì</span>}
                </button>
              ))}
            </div>

            {/* ‡πÅ‡∏™‡∏î‡∏á selected tags */}
            {selectedTags.length > 0 && (
              <div className="activities-selected-tags">
                <span>Tags ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: </span>
                {selectedTags.map((tag, i) => (
                  <span key={i} className="activities-selected-tag">
                    {tag}
                    <button 
                      onClick={() => handleTagToggle(tag)}
                      className="activities-remove-tag-btn"
                    >
                      √ó
                    </button>
                  </span>
                ))}
              </div>
            )}
          </div>
        )}

        {filteredActivities.length === 0 ? (
          <div className="activities-empty">
            <div className="activities-empty-icon">üìÖ</div>
            <div>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</div>
          </div>
        ) : (
          <div>
            {filteredActivities.map((act) => (
              <div 
                key={act.id} 
                className="activities-card"
                onClick={() => window.location.href = `/activities/${act.id}`}
                style={{ cursor: 'pointer' }}
              >
                <div className="activities-card-content">
                  <div className="activities-image-container">
                    {act.posterUrl ? (
                      <img 
                        src={act.posterUrl} 
                        alt={act.title} 
                        className="activities-image"
                      />
                    ) : (
                      <div className="activities-no-image">
                        <span>No Image</span>
                      </div>
                    )}
                  </div>

                  <div className="activities-content">
                    <h3 className="activities-activity-title">{act.title}</h3>
                    <div className="activities-description">{act.description}</div>

                    {/* ‡πÅ‡∏™‡∏î‡∏á tags ‡∏Ç‡∏≠‡∏á activity */}
                    {act.tags && act.tags.length > 0 && (
                      <div className="activities-card-tags">
                        {act.tags.map((tag, i) => (
                          <span key={i} className="activities-card-tag">
                            {tag}
                          </span>
                        ))}
                      </div>
                    )}

                    <div className="activities-meta">
                      <div className="activities-meta-item">
                        <span>‚úàÔ∏è</span>
                        <span>‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®: {act.country || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</span>
                      </div>
                      <div className="activities-meta-item">
                        <span>üìç</span>
                        <span>‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î: {act.province || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</span>
                      </div>
                      <div className="activities-meta-item">
                        <span>üìÖ</span>
                        <span>
                          ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {new Date(act.startDate).toLocaleDateString('th-TH', {
                            year: 'numeric',
                            month: 'long',
                            day: 'numeric'
                          })}
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}